package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"graphql-ozon/graph/helpers"
	"graphql-ozon/graph/model"
	"strconv"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment, limit *int32, offset *int32) ([]*model.Comment, error) {
	var result []*model.Comment
	for _, c := range r.CommentsContainer {
		if c.ParentID != nil && *c.ParentID == obj.ID {
			result = append(result, c)
		}
	}
	return helpers.Paginate(result, limit, offset), nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string) (*model.Post, error) {
	id := strconv.Itoa(len(r.PostsContainer) + 1)
	post := &model.Post{
		ID:      id,
		Title:   title,
		Content: content,
	}
	r.PostsContainer = append(r.PostsContainer, post)
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, text string, author string) (*model.Comment, error) {
	if len(text) > 2000 {
		return nil, fmt.Errorf("comment text exceeds 2000 characters")
	}

	// проверка поста
	var found bool
	for _, p := range r.PostsContainer {
		if p.ID == postID {
			found = true
			break
		}
	}
	if !found {
		return nil, fmt.Errorf("post not found")
	}

	id := strconv.Itoa(len(r.CommentsContainer) + 1)
	comment := &model.Comment{
		ID:       id,
		PostID:   postID,
		ParentID: parentID,
		Text:     text,
		Author:   author,
	}
	r.CommentsContainer = append(r.CommentsContainer, comment)
	return comment, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int32, offset *int32) ([]*model.Comment, error) {
	var result []*model.Comment
	for _, c := range r.CommentsContainer {
		if c.PostID == obj.ID && c.ParentID == nil {
			result = append(result, c)
		}
	}
	return helpers.Paginate(result, limit, offset), nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.PostsContainer, nil
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
