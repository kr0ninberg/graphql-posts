package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"graphql-ozon/graph/helpers"
	"graphql-ozon/graph/model"
)

// Replies is the resolver for the replies field.
func (r *commentResolver) Replies(ctx context.Context, obj *model.Comment, limit *int32, offset *int32) ([]*model.Comment, error) {
	replies, err := r.Storage.GetReplies(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return helpers.Paginate(replies, limit, offset), nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, author string, commentsEnabled *bool) (*model.Post, error) {
	enabled := true
	if commentsEnabled != nil {
		enabled = *commentsEnabled
	}
	return r.Storage.CreatePost(ctx, title, content, author, enabled)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, text string, author string) (*model.Comment, error) {
	return r.Storage.CreateComment(ctx, postID, parentID, text, author)
}

// SetCommentsAvailability is the resolver for the setCommentsAvailability field.
func (r *mutationResolver) SetCommentsAvailability(ctx context.Context, postID string, enabled bool) (*model.Post, error) {
	return r.Storage.SetCommentsEnabled(ctx, postID, enabled)
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, limit *int32, offset *int32) ([]*model.Comment, error) {
	allComments, err := r.Storage.GetCommentsByPost(ctx, obj.ID)
	if err != nil {
		return nil, err
	}
	return helpers.Paginate(allComments, limit, offset), nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	return r.Storage.GetAllPosts(ctx)
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
